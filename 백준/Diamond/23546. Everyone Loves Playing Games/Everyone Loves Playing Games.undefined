#include <bits/stdc++.h>
using namespace std;
using ll = long long;

/*
  문제 요약:
    - 에이스(A)에게는 N개의 쌍 (x_i, y_i), 라운드(B)에게는 M개의 쌍 (x'_j, y'_j) 이 주어짐.
    - 초기 X = 0.
    - 에이스는 각 (x_i, y_i)마다 둘 중 하나를 골라 X ^= (chosen).
    - 그 다음 라운드는 각 (x'_j, y'_j)마다 둘 중 하나를 골라 X ^= (chosen).
    - 에이스는 최종 X를 최대화하고, 라운드는 최종 X를 최소화하려 함.
    - 두 플레이어 모두 상대의 선택을 알고 있고 최적 전략을 쓴다고 할 때, 최종 X 값을 예측.

  풀이 아이디어:
    1. XOR의 선형 대수적 성질을 이용하면,
       - “(x_i, y_i)에서 x_i 또는 y_i 중 하나 선택”은
         → “무조건 x_i를 더하고, 추가로 (x_i ⊕ y_i)를 더할지 말지”로 바꿀 수 있다.
       - 마찬가지로 B도 “무조건 x'_j를 더하고, 추가로 (x'_j ⊕ y'_j)를 더할지 말지”.

    2. 따라서 처음에
       cur = ⊕ (모든 에이스의 x_i) ⊕ (모든 라운드의 x'_j).
       그리고
       A_벡터들 = { x_i ⊕ y_i | i=1..N }
       B_벡터들 = { x'_j ⊕ y'_j | j=1..M }.

    3. B_기저를 먼저 구성(비트 우선)하여, “B가 어떤 w를 골라 cur ⊕ w 를 최소로 만들 수 있는가”를
       쉽게 계산할 수 있도록 한다.

    4. 초기값 cur를 B_기저로 “최소화”(=reduce)하여 cur_rem이 된다.
       → cur_rem = min_{w ∈ span(B_벡터들)} ( cur ⊕ w ).

    5. A_벡터들 각각을 “B_기저로 reduce”하여, 그 결과 중 0이 아닌 것만 뽑아서 A_modB_기저를 만든다.
       → 이렇게 하면 “A가 B가 제거할 수 없는 비트 조합”만 남기게 되어, 최종값을 극대화할 때 쓸 수 있다.

    6. cur_rem에서 A_modB_기저를 이용하여 “가장 크게” 만들 수 있는 값을 찾는다.
       → 이것이 “max_{v ∈ span(A_벡터들)} min_{w ∈ span(B_벡터들)} ( cur ⊕ v ⊕ w )” 와 같다.

  시간 복잡도:
    - 각 케이스당 벡터 수 N, M 최대 1e4 이므로,
      * B_기저 구성: O(M * 60)
      * cur reduce: O(60)
      * A 각각을 reduce: O(N * 60)
      * A_modB_기저 구성: O(N * 60)
      * 결과 최대화: O(60)
    - T ≤ 20 인 점을 고려하면 충분히 통과.

  구현 세부:
    - basis_B[0..59], basis_AmodB[0..59] 두 배열을 0으로 초기화.
    - insert_basis(basis, x): x를 기저에 넣는 표준 루틴.
    - reduce_with_basis(basis, x): x 에서 basis로 줄일 수 있는 모든 비트를 제거하여 반환.
*/

static const int MAXB = 60;

// basis 배열: basis[i] 는 “이 벡터의 최고 비트가 i”인 기저 벡터
// insert into XOR-basis (bitwise linear basis)
void insert_basis(ll basis[], ll x)
{
	for (int b = MAXB - 1; b >= 0; b--) {
		if (!((x >> b) & 1)) continue;
		if (!basis[b]) {
			// 아직 basis[b]가 비어 있으면 여기에 x를 넣고 종료
			basis[b] = x;
			return;
		}
		// 이미 basis[b]가 있으면, x를 basis[b]으로 XOR 해서 더 낮은 비트로 내린다
		x ^= basis[b];
	}
	// x가 0이 되면 아무 것도 추가하지 않음
}

// x를 basis로 “최소화(=reduce)” 한다: 결과값은 “basis 벡터들로 XOR하여 x를 가장 작게 만든 값”
ll reduce_with_basis(ll basis[], ll x)
{
	for (int b = MAXB - 1; b >= 0; b--) {
		if (!basis[b]) continue;
		// x ⊕ basis[b] 가 x보다 작은지 비교 (XOR 결과가 작으면 적용)
		ll candidate = x ^ basis[b];
		if (candidate < x) {
			x = candidate;
		}
	}
	return x;
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(nullptr);

	int T;
	cin >> T;
	while (T--) {
		int N, M;
		cin >> N >> M;

		vector<ll> Axy(N), Bxy(M);
		ll cur = 0;

		// 1) 에이스 쪽 입력
		//    - cur ^= x_i
		//    - a_i = x_i ⊕ y_i 저장
		vector<ll> Avec(N);
		for (int i = 0; i < N; i++) {
			ll x, y;
			cin >> x >> y;
			cur ^= x;
			Avec[i] = x ^ y;
		}

		// 2) 라운드 쪽 입력
		//    - cur ^= x'_j
		//    - b_j = x'_j ⊕ y'_j 저장
		vector<ll> Bvec(M);
		for (int j = 0; j < M; j++) {
			ll x, y;
			cin >> x >> y;
			cur ^= x;
			Bvec[j] = x ^ y;
		}

		// 3) B_기저 구성
		ll basisB[MAXB];
		for (int i = 0; i < MAXB; i++) basisB[i] = 0;
		for (ll bval : Bvec) {
			insert_basis(basisB, bval);
		}

		// 4) 초기 cur 를 B_기저로 최소화 → cur_rem
		ll cur_rem = reduce_with_basis(basisB, cur);

		// 5) Avec (A 벡터들) 각각을 B_기저로 reduce 하고,
		//    0이 아닌 것은 A_modB_리스트에 남김
		vector<ll> A_modB_list;
		A_modB_list.reserve(N);
		for (ll aval : Avec) {
			ll reduced = reduce_with_basis(basisB, aval);
			if (reduced != 0) {
				A_modB_list.push_back(reduced);
			}
		}

		// 6) A_modB_list 로 A_modB_기저 구성
		ll basisAmB[MAXB];
		for (int i = 0; i < MAXB; i++) basisAmB[i] = 0;
		for (ll v : A_modB_list) {
			insert_basis(basisAmB, v);
		}

		// 7) cur_rem 에서 A_modB_기저를 이용해 최대화
		ll answer = cur_rem;
		for (int b = MAXB - 1; b >= 0; b--) {
			if (!basisAmB[b]) continue;
			ll candidate = answer ^ basisAmB[b];
			if (candidate > answer) {
				answer = candidate;
			}
		}

		cout << answer << "\n";
	}

	return 0;
}
