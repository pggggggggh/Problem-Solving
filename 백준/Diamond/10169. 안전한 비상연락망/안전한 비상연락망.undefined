#include <bits/stdc++.h>
#define all(x) begin(x), end(x)
#define all1(x) begin(x) + 1, end(x)
#define int long long
using namespace std;
using pi = pair<int, int>;

struct lazyseg {
	int sz;
	vector<int> seg, lazy;

	lazyseg(int n)
	{
		sz = 1;
		while (sz < n) sz *= 2;
		seg.resize(2 * sz, 1e18);
		lazy.resize(2 * sz, 1e18);
	}

	void propa(int node, int l, int r)
	{
		if (lazy[node] == 1e18) return;
		seg[node] = min(seg[node], lazy[node]);
		if (l != r) {
			lazy[node * 2] = min(lazy[node * 2], lazy[node]);
			lazy[node * 2 + 1] = min(lazy[node * 2 + 1], lazy[node]);
		}
		lazy[node] = 1e18;
	}

	int query(int x, int y, int node, int l, int r)
	{
		propa(node, l, r);
		if (y < l || r < x) return 1e18;
		if (x <= l && r <= y) return seg[node];
		int mid = l + r >> 1;
		return min(query(x, y, node * 2, l, mid), query(x, y, node * 2 + 1, mid + 1, r));
	}

	void add(int x, int y, int val, int node, int l, int r)
	{
		propa(node, l, r);
		if (y < l || r < x) return;
		if (x <= l && r <= y) {
			lazy[node] = min(lazy[node], val);
			propa(node, l, r);
			return;
		}
		int mid = l + r >> 1;
		add(x, y, val, node * 2, l, mid);
		add(x, y, val, node * 2 + 1, mid + 1, r);
		seg[node] = min(seg[node * 2], seg[node * 2 + 1]);
	}
};

struct heavy_light {
	int n;
	vector<vector<int>> adj, g;
	vector<int> sz, dep, top, in, out;
	vector<vector<int>> par;
	lazyseg seg;
	int dfn = 0;

	heavy_light(int n)
	    : n(n), adj(n), g(n), sz(n, 1), dep(n), top(n), in(n), out(n), seg(n)
	{
		par.resize(n, vector<int>(35));
		top[1] = 1;
		par[1][0] = -1;
	}

	void add_edge(int x, int y)
	{
		adj[x].push_back(y);
		adj[y].push_back(x);
	}

	void dfs_tree(int u, int p)
	{
		for (auto& v : adj[u]) {
			if (v == p) continue;
			dep[v] = dep[u] + 1;
			dfs_tree(v, u);
			g[u].push_back(v);
			par[v][0] = u;
			sz[u] += sz[v];
		}
	}

	void dfs_heavy(int u)
	{
		in[u] = ++dfn;
		for (auto& v : g[u]) {
			top[v] = (v == g[u][0] ? top[u] : v);
			dfs_heavy(v);
			if (sz[v] > sz[g[u][0]]) swap(v, g[u][0]);
		}
		out[u] = dfn;
	}

	void add(int x, int y, int val)
	{
		while (top[x] != top[y]) {
			if (dep[top[x]] < dep[top[y]]) swap(x, y);
			seg.add(in[top[x]], in[x], val, 1, 0, seg.sz - 1);
			x = par[top[x]][0];
		}
		if (dep[x] > dep[y]) swap(x, y);
		seg.add(in[x] + 1, in[y], val, 1, 0, seg.sz - 1);
	}

	int query(int x, int y)
	{
		int res = 1e18;
		while (top[x] != top[y]) {
			if (dep[top[x]] < dep[top[y]]) swap(x, y);
			res = min(res, seg.query(in[top[x]], in[x], 1, 0, seg.sz - 1));
			x = par[top[x]][0];
		}
		if (dep[x] > dep[y]) swap(x, y);
		res = min(res, seg.query(in[x] + 1, in[y], 1, 0, seg.sz - 1));
		return res;
	}
};

struct union_find {
	int n;
	vector<int> par;

	union_find(int n)
	{
		this->n = n;
		par.resize(n);
		for (int i = 0; i < n; i++) par[i] = i;
	}

	int find(int x)
	{
		if (par[x] == x) return x;
		return par[x] = find(par[x]);
	}

	void uni(int x, int y)
	{
		x = find(x), y = find(y);
		if (x == y) return;
		par[y] = x;
	}
};

void solve()
{
	int n, m;
	cin >> n >> m;
	vector<array<int, 4>> edges, sorted_edges, nomst_edges;
	vector<bool> is_mst(m, false);
	for (int i = 0; i < m; i++) {
		int x, y, z;
		cin >> x >> y >> z;
		edges.push_back({ z, x, y, i });
	}
	sorted_edges = edges;
	sort(all(sorted_edges));
	heavy_light hld(n + 1);
	union_find uf(n + 1);
	int ans = 0;
	for (int i = 0; i < m; i++) {
		auto& [z, x, y, idx] = sorted_edges[i];
		if (uf.find(x) == uf.find(y)) {
			nomst_edges.push_back({ z, x, y, idx });
			continue;
		}
		is_mst[idx] = true;
		uf.uni(x, y);
		ans += z;
		hld.add_edge(x, y);
	}
	hld.dfs_tree(1, -1);
	hld.dfs_heavy(1);
	for (auto& [z, x, y, idx] : nomst_edges) {
		hld.add(x, y, z);
	}
	for (int i = 0; i < m; i++) {
		auto& [z, x, y, idx] = edges[i];
		if (!is_mst[i]) cout << ans << '\n';
		else {
			int sex = hld.query(x, y);
			if (sex == 1e18) cout << "-1\n";
			else cout << ans - z + hld.query(x, y) << '\n';
		}
	}
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	solve();
}