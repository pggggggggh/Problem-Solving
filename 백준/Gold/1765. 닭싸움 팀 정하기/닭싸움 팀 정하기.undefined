#include <bits/stdc++.h>
#define all(x) begin(x), end(x)
#define all1(x) begin(x) + 1, end(x)
#define int long long
using namespace std;
using pi = pair<int, int>;

struct union_find {
	int n;
	vector<int> par;

	union_find(int n)
	    : n(n)
	{
		par.resize(n);
		for (int i = 0; i < n; i++) par[i] = i;
	}

	int find(int x)
	{
		if (par[x] == x) return x;
		return par[x] = find(par[x]);
	}

	void uni(int x, int y)
	{
		x = find(x), y = find(y);
		if (x == y) return;
		par[y] = x;
	}
};

void solve()
{
	int n, k;
	cin >> n >> k;
	union_find uf(n + 1);
	vector<vector<int>> adj(n + 1);
	while (k--) {
		char op;
		int x, y;
		cin >> op >> x >> y;
		if (op == 'F') uf.uni(x, y);
		else {
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
	}
	vector<int> grp[2];
	vector<int> vis(n + 1);
	function<void(int, int)> dfs = [&](int u, int c) {
		vis[u] = 1;
		grp[c].push_back(u);
		for (auto& v : adj[u]) {
			if (!vis[v]) dfs(v, 1 - c);
		}
	};
	for (int i = 1; i <= n; i++) {
		if (!vis[i]) {
			grp[0].clear();
			grp[1].clear();
			dfs(i, 0);
			for (int k = 0; k < 2; k++) {
				if (!grp[k].empty()) {
					for (auto& x : grp[k]) uf.uni(x, grp[k][0]);
				}
			}
		}
	}
	set<int> st;
	for (int i = 1; i <= n; i++) st.insert(uf.find(i));
	cout << st.size();
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	solve();
}