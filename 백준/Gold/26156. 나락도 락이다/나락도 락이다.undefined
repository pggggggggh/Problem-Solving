#include <bits/stdc++.h>
#define all(x) begin(x), end(x)
#define all1(x) begin(x) + 1, end(x)
#define int long long
using namespace std;
using pi = pair<int, int>;

template <int MOD>
struct ModInt {
	int value;
	static const int MOD_value = MOD;

	ModInt(long long v = 0)
	{
		value = v % MOD;
		if (value < 0) value += MOD;
	}
	ModInt(long long a, long long b)
	    : value(0)
	{
		*this += a;
		*this /= b;
	}

	ModInt& operator+=(ModInt const& b)
	{
		value += b.value;
		if (value >= MOD) value -= MOD;
		return *this;
	}
	ModInt& operator-=(ModInt const& b)
	{
		value -= b.value;
		if (value < 0) value += MOD;
		return *this;
	}
	ModInt& operator*=(ModInt const& b)
	{
		value = (long long)value * b.value % MOD;
		return *this;
	}

	// mint::mexp
	static ModInt mexp(ModInt a, long long e)
	{
		ModInt res = 1;
		while (e) {
			if (e & 1) res *= a;
			a *= a;
			e >>= 1;
		}
		return res;
	}
	friend ModInt inverse(ModInt a) { return mexp(a, MOD - 2); }
	ModInt& operator/=(ModInt const& b) { return *this *= inverse(b); }
	friend ModInt operator+(ModInt a, ModInt const b) { return a += b; }
	friend ModInt operator-(ModInt a, ModInt const b) { return a -= b; }
	friend ModInt operator-(ModInt const a) { return 0 - a; }
	friend ModInt operator*(ModInt a, ModInt const b) { return a *= b; }
	friend ModInt operator/(ModInt a, ModInt const b) { return a /= b; }
	friend std::ostream& operator<<(std::ostream& os, ModInt const& a) { return os << a.value; }
	friend bool operator==(ModInt const& a, ModInt const& b) { return a.value == b.value; }
	friend bool operator!=(ModInt const& a, ModInt const& b) { return a.value != b.value; }
};

using mint = ModInt<1'000'000'007>;

mint dp[1000005][5]; // 1~i까지의 substring 중 suffix가 j까지 채워진 것

void solve()
{
	int n;
	string s;
	cin >> n >> s;
	s = '$' + s;
	dp[0][0] = mint(1);
	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= 4; j++) dp[i][j] = dp[i - 1][j];
		if (s[i] == 'R') {
			dp[i][1] += dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][3] + dp[i - 1][4];
		} else if (s[i] == 'O') {
			dp[i][0] += dp[i - 1][0] + dp[i - 1][2] + dp[i - 1][3] + dp[i - 1][4];
			dp[i][2] += dp[i - 1][1];
		} else if (s[i] == 'C') {
			dp[i][0] += dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][3] + dp[i - 1][4];
			dp[i][3] += dp[i - 1][2];
		} else if (s[i] == 'K') {
			dp[i][0] += dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4];
			dp[i][4] += dp[i - 1][3];
		} else {
			dp[i][0] += dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][3] + dp[i - 1][4];
		}
	}
	cout << dp[n][4];
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	solve();
}