#include <bits/stdc++.h>
#define all(x) begin(x), end(x)
#define all1(x) begin(x) + 1, end(x)
#define int long long
using namespace std;
using pi = pair<int, int>;

struct segtree {
	using S = struct node {
		int lmx, rmx, mx, sum;

		node()
		{
			lmx = rmx = mx = -1e9;
			sum = 0;
		}

		node(int val)
		{
			lmx = rmx = mx = sum = val;
		}
	};
	S e = node();

	S op(S l, S r)
	{
		node res;
		res.lmx = max(l.lmx, l.sum + r.lmx);
		res.rmx = max(r.rmx, r.sum + l.rmx);
		res.mx = max({ l.mx, r.mx, l.rmx + r.lmx });
		res.sum = l.sum + r.sum;
		return res;
	}

	int n, sz;
	vector<S> seg;

	segtree(int n, const vector<S>& v = vector<S>())
	{
		assert(n >= v.size());
		this->n = n;
		sz = 1;
		while (sz < n) sz *= 2;
		seg = vector(2 * sz, e);
		for (int i = 0; i < v.size(); i++) seg[i + sz] = v[i];
		for (int i = sz - 1; i >= 1; i--) seg[i] = op(seg[i * 2], seg[i * 2 + 1]);
	}

	void put(int x, const S& val)
	{
		x += sz;
		seg[x] = val;
		while (x > 1) {
			x /= 2;
			seg[x] = op(seg[x * 2], seg[x * 2 + 1]);
		}
	}

	void add(int x, const S& val)
	{
		x += sz;
		seg[x] = op(seg[x], val);

		while (x > 1) {
			x /= 2;
			seg[x] = op(seg[x * 2], seg[x * 2 + 1]);
		}
	}

	S query(int l, int r)
	{
		S res_l, res_r;
		l += sz, r += sz;
		for (; l <= r; l >>= 1, r >>= 1) {
			if (l & 1) res_l = op(res_l, seg[l++]);
			if (!(r & 1)) res_r = op(seg[r--], res_r);
		}
		return op(res_l, res_r);
	}
};

void solve()
{
	int n, m, q;
	cin >> n >> m >> q;
	vector<int> a(n + 1), cha(n + 1);
	for (int i = 1; i <= n; i++) cin >> a[i];
	for (int i = 1; i <= n - 1; i++) {
		if (a[i + 1] - a[i] > 0) cha[i] = 1;
		else if (a[i + 1] == a[i]) cha[i] = 0;
		else cha[i] = -1;
	}
	segtree seg(n), minusseg(n);
	for (int i = 1; i <= n - 1; i++) {
		if (cha[i] == 1) {
			seg.put(i, 1);
			minusseg.put(i, -1e9);
		}
		if (cha[i] == -1) {
			seg.put(i, -1e9);
			minusseg.put(i, 1);
		}
	}
	for (int i = 1; i <= q; i++) {
		int s, e;
		cin >> s >> e;
		if (s == e) cout << "ja\n";
		else {
			int x = seg.query(s, e - 1).mx + 1;
			int y = minusseg.query(s, e - 1).mx + 1;
			// cout << x << ' ' << y << '\n';
			cout << (max(x, y) > m ? "nej" : "ja") << '\n';
		}
	}
}

signed main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	solve();
}